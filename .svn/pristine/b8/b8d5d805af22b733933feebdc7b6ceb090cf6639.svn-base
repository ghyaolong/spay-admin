############################################################################
#DEBUG Level: 指出细粒度信息事件对调试应用程序是非常有帮助的,就是输出debug的信息.
#INFO level: 表明消息在粗粒度级别上突出强调应用程序的运行过程,就是输出提示信息.
#WARN level: 表明会出现潜在错误的情形,就是显示警告信息.
#ERROR level: 指出虽然发生错误事件,但仍然不影响系统的继续运行.就是显示错误信息.
#FATAL level: 指出每个严重的错误事件将会导致应用程序的退出.
#ALL level: 是最低等级的,用于打开所有日志记录.
#OFF level: 是最高等级的,用于关闭所有日志记录.
#log4j建议只使用五个级别,级别顺序(由低到高): DEBUG < INFO < WARN < ERROR < FATAL
############################################################################

### set log levels ###
#log4j.rootLogger = debug , stdout , D , E
log4j.rootLogger = ERROR , stdout , D
#log4j.rootLogger = ERROR , D

###  output to the console ###
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern = %-d{yyyy-MM-dd HH\:mm\:ss} [%c]-[%p] %m%n

### Output to the log file ###
log4j.appender.D = org.apache.log4j.DailyRollingFileAppender
### D:\ProgramFiles\apache-tomcat-7.0.56\webapps\dsym\WEB-INF\logs
#log4j.appender.D.File = ${spay.root}/WEB-INF/logs/error.log
log4j.appender.D.Append = true
log4j.appender.D.Threshold = ERROR 
log4j.appender.D.layout = org.apache.log4j.PatternLayout
log4j.appender.D.layout.ConversionPattern = %-d{yyyy-MM-dd HH:mm:ss} [ %t:%r ] - [ %p ] %m%n
